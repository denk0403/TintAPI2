{
	"openapi": "3.0.3",
	"info": {
		"title": "TintAPI2",
		"version": "1.1",
		"description": "This is the API documentation for TintAPI2, which is the backend for <a href='https://tintgenerator.vercel.app/'>Tint Generator</a>. The repository for this API can be found on <a href='https://github.com/denk0403/TintAPI2'>GitHub</a>.",
		"contact": {
			"name": "Dennis Kats",
			"url": "https://denniskats.dev/",
			"email": "denniskats43@gmail.com"
		}
	},
	"tags": [
		{
			"name": "Endpoints",
			"description": "API endpoints"
		}
	],
	"paths": {
		"/api/one-way-tm": {
			"post": {
				"tags": ["Endpoints"],
				"summary": "Runs a One-way Turing Machine.",
				"description": "Runs a One-way Turing Machine program on the given tests.",
				"operationId": "run_one_way_turing_machine_api_one_way_tm_post",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/TintTMSubmission" } }
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TintTMOutput" } }
						}
					}
				}
			}
		},
		"/api/two-way-tm": {
			"post": {
				"tags": ["Endpoints"],
				"summary": "Runs a Two-way Turing Machine.",
				"description": "Runs a Two-way Turing Machine program on the given tests.",
				"operationId": "run_two_way_turing_machine_api_two_way_tm_post",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/TintTMSubmission" } }
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TintTMOutput" } }
						}
					}
				}
			}
		},
		"/api/dfa": {
			"post": {
				"tags": ["Endpoints"],
				"summary": "Runs a DFA program.",
				"description": "Runs a DFA program on the given tests.",
				"operationId": "run_dfa_api_dfa_post",
				"requestBody": {
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/TintDFASubmission" } }
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/TintDFAOutput" } }
						}
					}
				}
			}
		},
		"/api/render-dot": {
			"post": {
				"tags": ["Endpoints"],
				"summary": "Renders a graph from DOT syntax.",
				"description": "Renders a graph from DOT syntax. The layout engine and format type can be specified via query parameters, however they default to 'sfdp' and 'svg', respectively. You can access a playground <a href='/dot'>here</a>.",
				"operationId": "run_render_dot_api_render_dot_post",
				"parameters": [
					{
						"name": "layout",
						"in": "query",
						"description": "Sets the layout engine to use.",
						"schema": {
							"type": "string",
							"default": "sfdp",
							"enum": ["circo", "dot", "fdp", "neato", "osage", "patchwork", "sfdp", "twopi"]
						}
					},
					{
						"name": "format",
						"in": "query",
						"description": "Sets the format to output.",
						"schema": {
							"type": "string",
							"default": "svg",
							"enum": ["dot", "svg", "png", "jpg"]
						}
					}
				],
				"requestBody": {
					"content": {
						"text/plain": {
							"schema": { "type": "string" },
							"example": "graph test {\n    a -- b [label=3]\n    b -- c [label=10]\n    c -- d [label=2]\n    d -- a [label=4]\n}"
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"text/xml": {
								"schema": {
									"type": "string",
									"contentMediaType": "text/xml"
								}
							},
							"image/png": {},
							"image/jpg": {}
						}
					}
				}
			}
		},
		"/api/start": {
			"get": {
				"tags": ["Endpoints"],
				"deprecated": true,
				"summary": "Awakes the API",
				"description": "Awakes the API from idle to prepare to receive requests. This endpoint is deprecated because all handlers are now serverless functions.",
				"operationId": "confirmAwake_api_start_get",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/StartOutput" } }
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"StartOutput": {
				"deprecated": true,
				"title": "StartOutput",
				"required": ["status"],
				"type": "object",
				"properties": { "status": { "title": "Status", "type": "integer" } },
				"example": { "status": 200 }
			},
			"TintTMOutput": {
				"title": "TintTMOutput",
				"required": ["output"],
				"type": "object",
				"properties": {
					"output": { "title": "Output", "type": "string" }
				},
				"example": {
					"output": "Simulating with \"a b\".\nstart: a b _\n      ^\nq1: _ b _\n     ^\naccept: _ _ _\n           ^\nAccepted.\n\n1 accepted.\n0 rejected.\n0 errors.\n"
				}
			},
			"TintTMSubmission": {
				"title": "TintTMSubmission",
				"required": ["program", "tests"],
				"type": "object",
				"properties": {
					"program": { "title": "Program", "type": "string" },
					"tests": { "title": "Tests", "type": "string" },
					"verbose": { "title": "Verbose", "type": "boolean" }
				},
				"example": {
					"program": "start: start \naccept: accept \nreject: reject \n\ntransitions:\n- [start, a, q1, _, R]\n- [start, _, reject, _, R]\n- [q1, a, accept, _, R]\n- [q1, _, reject, _, R]",
					"tests": "a a a\n",
					"verbose": true
				}
			},
			"TintDFAOutput": {
				"title": "TintDFAOutput",
				"required": ["output"],
				"type": "object",
				"properties": {
					"output": { "title": "Output", "type": "string" }
				},
				"example": {
					"output": "Simulating with \"0 1 0 1 1\".\na: 0 1 0 1 1\nb: 1 0 1 1\na: 0 1 1\nb: 1 1\na: 1\na: \nRejected.\n\n0 accepted.\n1 rejected.\n0 errors."
				}
			},
			"TintDFASubmission": {
				"title": "TintDFASubmission",
				"required": ["program", "tests"],
				"type": "object",
				"properties": {
					"program": { "title": "Program", "type": "string" },
					"tests": { "title": "Tests", "type": "string" },
					"verbose": { "title": "Verbose", "type": "boolean" }
				},
				"example": {
					"program": "start: a\n\naccept-states: [b]\n\ntransitions:\n- [a, 0, b]\n- [a, 1, a]\n- [b, 0, b]\n- [b, 1, a]",
					"tests": "0 1 1 0\n",
					"verbose": true
				}
			}
		}
	}
}
